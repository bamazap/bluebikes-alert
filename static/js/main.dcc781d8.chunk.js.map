{"version":3,"sources":["SelectStation/SelectStation.js","ShowStation/ShowStation.js","ShowCounts/ShowCounts.js","App/App.js","serviceWorker.js","index.js"],"names":["SelectStation","state","selectedStation","stations","handleSelectStation","_this","setState","props","onSelectStation","value","_this2","this","fetch","then","res","json","catch","alert","data","map","station","label","name","react_default","a","createElement","react_select_esm","className","onChange","options","Component","ShowStation","showStation","undefined","lat","lon","parseFloat","uri","concat","src","alt","ShowCounts","_ref","bike","dock","counts","Bikes","Docks","Object","entries","_ref2","_ref3","slicedToArray","number","key","bell","Audio","Notification","permission","notify","message","App","pollInterval","NaN","waitInterval","poll","station_id","wait","stationID","clearInterval","pollAPI","filter","s","length","num_bikes_available","num_docks_available","setInterval","what","_this3","checkCounts","play","requestPermission","_this4","waitFor","waiting","Number","isNaN","id","src_SelectStation_SelectStation","src_ShowStation_ShowStation","ShowCounts_ShowCounts","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dcc781d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport './SelectStation.css';\n\nclass SelectStation extends Component {\n  state = {\n    selectedStation: null,\n    stations: [],\n  }\n\n  handleSelectStation = (selectedStation) => {\n    this.setState({ selectedStation })\n    this.props.onSelectStation(selectedStation.value);\n  };\n\n  componentDidMount() {\n    fetch(`https://gbfs.bluebikes.com/gbfs/en/station_information.json`)\n      .then(res => res.json())\n      .catch(() => {\n        alert('Could not connect to Blue Bikes servers.');\n        return { data: { stations: [] } };\n      })\n      .then(data => this.setState({\n        stations: data.data.stations\n          .map(station => ({ value: station, label: station.name })),\n      }));\n  }\n\n  render() {\n    return (\n      <Select\n        className=\"select-station\"\n        value={this.state.selectedStation}\n        onChange={this.handleSelectStation}\n        options={this.state.stations}\n      >\n      </Select>\n    );\n  }\n}\n\nexport default SelectStation;\n","\nimport React, { Component } from 'react';\nimport './ShowStation.css';\n\nconst WIDTH = 600;\nconst HEIGHT = 300;\n\nclass ShowStation extends Component {\n  render() {\n    const showStation = this.props.lat !== undefined && this.props.lon !== undefined;\n    const lat = showStation ? parseFloat(this.props.lat) : 42.3616357609158;\n    const lon = showStation ? parseFloat(this.props.lon) : -71.0906195640564;\n    let uri =\n      'https://image.maps.api.here.com/mia/1.6/mapview'\n      + '?app_id=U9umRZloTL1NlnFVh5yy'\n      + '&app_code=ysINLh115zGxmmSBeofNNg'\n      + `&w=${WIDTH}`\n      + `&h=${HEIGHT}`\n      + '&z=14'\n      + `&c=${lat},${lon}`\n      + (showStation ? '' : '&nodot');\n    return (\n      <div className='show-station'>\n        <img src={uri} alt={'Station on Map'}/>\n      </div>\n    );\n  }\n}\n\nexport default ShowStation;\n","import React from 'react';\nimport './ShowCounts.css';\n\nexport default function ShowCounts({ bike, dock }) {\n  const counts = {\n    Bikes: bike !== undefined ? bike : -1,\n    Docks: dock !== undefined ? dock : -1,\n  };\n  return (\n    <div className=\"show-counts\">\n    {Object.entries(counts).map(([name, number]) => (\n      <div className=\"count\" key={name}>\n        <div className=\"name\">{name}</div>\n        <div className={number === -1 ? 'number hidden' : 'number'}>{number}</div>\n      </div>\n    ))}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport SelectStation from '../SelectStation/SelectStation';\nimport ShowStation from '../ShowStation/ShowStation';\nimport ShowCounts from '../ShowCounts/ShowCounts';\n\nconst PERIOD = 15000;\n\nconst bell = new Audio('bell.wav');\n\n// handle browsers which do not have the notification API\n// eslint-disable-next-line no-use-before-define\nvar Notification = Notification || { permission: 'denied' };\n\nfunction notify(message) {\n  if (Notification.permission === 'denied') {\n    alert(message);\n  } else {\n    new Notification(message);\n  }\n}\n\nclass App extends Component {\n  state = {\n    station: {},\n    pollInterval: NaN,\n    waitInterval: NaN,\n    bike: undefined,\n    dock: undefined,\n  };\n\n  handleSelectStation = station => {\n    station = station || {};\n    this.setState({ station });\n    this.poll(station.station_id);\n    this.wait(null);\n  }\n\n  poll(stationID) {\n    clearInterval(this.state.pollInterval);\n    const pollAPI = () => {\n      fetch('https://gbfs.bluebikes.com/gbfs/en/station_status.json')\n        .then(res => res.json())\n        .catch(() => {\n          notify('Could not connect to Blue Bikes servers.');\n          return { data: { stations: [] } };\n        })\n        .then(data => {\n          const stations = data.data.stations\n            .filter(s => s.station_id === stationID);\n          if (stations.length === 1) {\n            this.setState({\n              bike: stations[0].num_bikes_available,\n              dock: stations[0].num_docks_available,\n            });\n          } else {\n            clearInterval(this.state.pollInterval);\n            this.setState( { pollInterval: NaN });\n          }\n        });\n    };\n    const pollInterval = setInterval(pollAPI, PERIOD);\n    pollAPI();\n    this.setState({ pollInterval });\n  }\n\n  wait(what) {\n    clearInterval(this.state.waitInterval);\n    let waitInterval = NaN;\n    if (what) {\n      const checkCounts = () => {\n        if (this.state[what] > 0) {\n          bell.play();\n          notify(`There is now a ${what} available.`);\n          this.wait(null);\n        }\n      };\n      waitInterval = setInterval(checkCounts, PERIOD);\n      checkCounts();\n    }\n    this.setState({ waitInterval });\n  }\n  \n  componentDidMount() {\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.pollInterval);\n    clearInterval(this.state.waitInterval);\n  }\n\n  render() {\n    let waitFor = '';\n    if (this.state.bike === 0) waitFor = 'bike';\n    if (this.state.dock === 0) waitFor = 'dock';\n    const waiting = !Number.isNaN(this.state.waitInterval);\n    return (\n      <div id=\"app\" className=\"flow\">\n        <header>\n          <h1>BLUEbikes Watcher</h1>\n        </header>\n        <main className=\"flow\">\n          <SelectStation\n            onSelectStation={this.handleSelectStation}\n          />\n          <ShowStation\n            lat={this.state.station.lat}\n            lon={this.state.station.lon}\n          />\n          <ShowCounts\n            bike={this.state.bike}\n            dock={this.state.dock}\n          />\n          {waitFor ? (\n            <button\n              onClick={() => this.wait(waiting ? null : waitFor)}\n            >{waiting ? 'Stop waiting' : 'Wait'} for {waitFor}.</button>\n          ) : (<div />)}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}